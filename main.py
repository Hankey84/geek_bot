import asyncio
from config import SECRET_TOKEN
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters.command import Command
from aiogram.filters import CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import StateFilter

import logging
import random
from random_fox import fox
from handlers import career_choi—Åe



#

#
#
# # –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
# @dp.message(Command("start"))
# async def cmd_start(message: types.Message):
#     await message.answer("–ü—Ä–∏–≤–µ—Ç üòä", reply_markup=keyword1)
#
#
# # –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /run
# @dp.message(Command("run"))
# async def cmd_run(message: types.Message):
#     await message.answer("–ü—Ä–∏–≤–µ—Ç üòä\n–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë —Ñ–æ—Ç–æ", reply_markup=keyword2)
#
#
# # –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /info
# @dp.message(Command("info"))
# async def cmd_info(message: types.Message):
#     number = random.randint(1, 7)
#     await message.answer("–Ø —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç")
#     await message.answer(f"–¢–≤–æ—ë —á–∏—Å–ª–æ {number}")
#
#
# # –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç —Ñ–æ—Ç–æ
# @dp.message(F.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ')
# async def cmd_foto(message: types.Message, state: FSMContext):
#     # await ClientStateGroup.photo.set()
#     await state.set_state(ClientStateGroup.photo)
#     await message.answer(f"–¢–µ–ø–µ—Ä—å –∂–¥—É —Ç–≤–æ—ë —Ñ–æ—Ç–æ üòä")
#
#
# @dp.message(lambda message: not message.photo, state=state.set_state(ClientStateGroup.photo))
# async def check_photo(message: types.Message):
#     await message.reply('–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ')
#
#
#
# # –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /fox
# @dp.message(F.text == '–ü–æ–∫–∞–∑–∞—Ç—å –ª–∏—Å—É')
# @dp.message(Command("fox"))
# async def cmd_fox(message: types.Message):
#     img_fox = fox()
#     await message.answer(f"–î–µ—Ä–∂–∏ –ª–∏—Å—É üòä")
#     await bot.send_photo(message.from_user.id, photo=img_fox)
#
#
# # –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
# @dp.message(F.text)
# async def msg_echo(message: types.Message):
#     print(message.text)
#     name = message.chat.first_name
#     if "–ø—Ä–∏–≤–µ—Ç" in message.text.lower():
#         await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {name}")
#     elif "–ø–æ–∫–∞" in message.text.lower():
#         await message.answer(f"–ü–æ–∫–∞, {name}")
#     elif "—Ç—ã –∫—Ç–æ" in message.text.lower():
#         await message.answer(f"<b>–Ø –±–æ—Ç</b> {name}")
#     elif "—É—Ä–∞" in message.text.lower():
#         await message.answer("<i>–£—Ä–∞-—É—Ä–∞</i>!!!!!!!!!")
#     else:
#         await message.answer("<s>–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é</s>")


async def main():
    logging.basicConfig(level=logging.INFO)

    # –û–±—ä–µ–∫—Ç –±–æ—Ç
    bot = Bot(token=SECRET_TOKEN, parse_mode='HTML')

    dp = Dispatcher()

    dp.include_router(career_choi—Åe.router)
    # dp.include_router(common.router)

    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())